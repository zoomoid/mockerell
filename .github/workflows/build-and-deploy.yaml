name: build and publish container images

on:
  push:
    tags: [ 'v*.*.*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DEPLOYMENT_NAME: mockerellbot
  CONTAINER_NAME: mockerellbot

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern=v{{version}}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          platforms: linux/amd64,linux/arm64/v8
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build
    permissions:
      contents: read
      packages: write
      # for getting an OIDC token
      id-token: write
    environment: Production
    steps:
      - name: Install OIDC Client from Core Package
        run: npm install @actions/core@1.6.0 @actions/http-client

      - name: Get Id Token
        uses: actions/github-script@v6
        id: idtoken
        with:
          script: |
            const c = require('@actions/core')
            let id_token = await c.getIDToken()
            c.setOutput('id_token', id_token)

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Setup cluster in kubeconfig
        run: |
          echo ${{ secrets.CLUSTER_CERTIFICATE_AUTHORITY }} | base64 --decode > ca.crt
          kubectl config set-cluster ${{ secrets.CLUSTER_NAME }} \
            --server=${{ secrets.CLUSTER_ENDPOINT }} \
            --certificate-authority="./ca.crt" \
            --embed-certs=true

      - name: Setup kubeconfig to use OIDC token
        run: |
          kubectl config set-credentials deployer \
            --token=${{ steps.idtoken.outputs.id_token }}

      - name: Setup context for kubectl
        run: |
          kubectl config set-context deployer \
            --cluster=${{ secrets.CLUSTER_NAME }} \
            --namespace=${{ vars.NAMESPACE }} \
            --user=deployer
          kubectl config use-context deployer

      - name: Check authentication
        run: kubectl auth whoami

      - if: ${{ github.event_name == 'push' && github.ref_type == 'tag' }}
        name: Set image in deployment to ${{ env.CONTAINER_IMAGE }}:${{ github.ref_name }}
        env:
          CONTAINER_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        run: >-
          kubectl set image deployment ${{ env.DEPLOYMENT_NAME }}
          ${{ env.CONTAINER_NAME }}=${{ env.CONTAINER_IMAGE }}:${{ github.ref_name }}

      - name: Wait for deployment progression
        run: kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} --timeout=2m

      - name: Show namespace status
        run: kubectl get deployments,pods -l app.kubernetes.io/name=${{ env.DEPLOYMENT_NAME }}

      - name: Show events for deployment
        run: kubectl events --for=deployment/${{ env.DEPLOYMENT_NAME }}
